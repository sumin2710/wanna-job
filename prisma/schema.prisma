generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  HR_MANAGER
  ADMIN
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @unique @map("email")
  password  String   @map("password")
  role      UserRole @default(USER) @map("role")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  userInfos UserInfos? // 1:1, User는 UserInfo를 가질수도 안가질수도 있다. 
  resumes   Resumes[] // 1: N , User는 Resume를 여러개 가질 수 있다.

  @@map("Users")
}

model UserInfos {
  userInfoId Int @id @default(autoincrement()) @map("userInfoId")
  userId     Int @unique @map("userId")

  name         String   @map("name")
  age          Int?     @map("age")
  gender       String?  @map("gender")
  profileImage String?  @map("profileImage")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("UserInfos")
}

enum ResumeStatus {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model Resumes {
  resumeId Int @id @default(autoincrement()) @map("resumeId")
  userId   Int @map("userId")

  title        String       @map("title")
  introduction String?      @map("introduction") @db.Text
  hobby        String?      @map("hobby")
  status       ResumeStatus @default(APPLY) @map("status")
  createdAt    DateTime     @default(now()) @map("createdAt")
  updatedAt    DateTime     @updatedAt @map("updatedAt")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@map("Resumes")
}
